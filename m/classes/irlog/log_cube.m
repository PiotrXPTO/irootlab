%> @brief Log generated by a @ref reptt_blockcube
%>
%> This has a 4-D @ref logs property (a cell)
%>
%> Each slice logs(:, :, :, i) accounts for a different log class
%>
%> @sa reptt_blockcube
%>
classdef log_cube < irlog
    properties
        logs;
        blocks;
    end;
    
    properties(SetAccess=protected)
        no_datasets;
    end;
    
    methods
        %> Pre-allocates the @ref log property; prepares to record.
        %>
        %> @param log_mold a cell of @ref irlog objects
        %> @param block_mold a cell of @ref block objects. Only used to get allocation dimensions
        %> @param no_reps Number of repetitions, such as "k" from a k-fold cross-validation
        function o = allocate_logs(o, log_mold, block_mold, no_reps)
            [ni, nj, nk] = size(block_mold);
            nl = numel(log_mold);
            
            for il = 1:nl
                for ii = 1:ni
                    for ij = 1:nj
                        for ik = 1:nk
                            if ~isempty(block_mold{ii, ij, ik})
                                o.logs{ii, ij, ik, il} = log_mold{il}.allocate(no_reps);
                            else
                                o.logs{ii, ij, ik, il} = [];
                            end;
                        end;
                    end;
                end;
            end;
        end;
    end;
    
    methods
        function o = log_cube()
            o.classtitle = 'Log Cube';
        end;
    end;
end
