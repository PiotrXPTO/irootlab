%> @brief Log generated by as_fsel_grades
classdef log_as_fsel_grades < log_as_fsel
    properties
        %> Optimization sub-sets
        opt_subsets;
        %> Optimization grades
        opt_grades;
        %> Whether the selected features are peaks
        flag_peaks;
        %> 
        type;
        %>
        threshold;
    end;

    methods
        function o = log_as_fsel_grades()
            o.classtitle = 'Grades';
            o.moreactions = [o.moreactions, {'extract_dataset'}];
            o.flag_ui = 0;
        end;

        %> Creates a dataset with one row containing the @ref opt_grades property.
        %>
        %> @sa as_fsel_grades
        function out = extract_dataset(o)
            if isempty(o.opt_subsets)
                irerror('Object contains no information about optimization of number of features');
            end;
            
            out = irdata();    
            out.X = o.opt_grades(:)';  % row vector
            out.classes = 0;
            out.classlabels = {o.yunit};
            out.fea_x = 1:numel(o.opt_grades);
            out.xname = 'Number of features';
            out.xunit = '';
            out.yname = o.yname;
            out.yunit = o.yunit;
            out.title = 'Optimization of number of features';
            out = out.assert_fix();
        end;
    end;   
    
    %>>>>>> DRAWING
    methods
        %> Enhancements from ancestor @ref log_as_fsel_grades
        %>
        %> @arg Draws threshold line
        %> @arg Draws hachures only if threshold mode
        %> @arg Draws peaks
        function o = draw(o, data_hint, flag_mark)
            if ~exist('data_hint', 'var')
                data_hint = [];
            end;

            if ~exist('flag_mark', 'var')
                flag_mark = 0;
            end;
            
            o.draw_hachures2();
            o.draw_grades(data_hint, 0);

            o.draw_threshold();
            if flag_mark
                if o.flag_peaks
                    o.draw_peaks();
                else
                    o.draw_markers();
                end;
            end;
            o.draw_finish();
        end;
    end;

    methods(Access=protected)
        %> Checks for existence of Inf's and calculates ymax automatically
        function o = draw_hachures2(o)
            if strcmp(o.type, 'threshold')
                g = o.grades;
                g(g == Inf) = [];
                ymax = max(g)*1.05;
                o.draw_hachures(o.fea_x, ymax);
            end;
        end;
        
        function o = draw_threshold(o)
            if strcmp(o.type, 'threshold')
                draw_threshold_line(o.fea_x, o.threshold);
            end;
        end;
        
        function o = draw_peaks(o)
            flag_text = 1;
            draw_peaks(o.fea_x, o.grades, o.v, flag_text);
        end;
    end; 
end
