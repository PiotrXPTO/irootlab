/**

@page middleguide Middle-level Guide

This guide was generated from the file midguide.cpp.

@section middleguide_who Who should read this guide

This guide is directed to users who would like to use the IRoot API, or customize IRoot auto-generated MATLAB code.

@section middleguide_scope Scope

This guide talks about:
@arg how autogenerated code is maintained through a MATLAB session
@arg other important details
@arg demo files

@section middleguide_help Getting help

Typing <code>help <something></code> does not work so well, because the comments within the files have been formatted for Doxygen. Fortunately there is an alternative for
that:

@code
iroothelp <something>
@endcode

This will open corresponding documentation in MATLAB web browser.

Calling

@code
iroothelp
@endcode

without parameters will bring this documentation main page.

Also, the GUIs have context-sensitive help, accessible by pressing @ref F1.

@section middleguide_autogen Autogenerated code

Almost every operation of @c datatool and @c objtool is actually performed indirectly by generating MATLAB code. User actions usually trigger this sequence:
@arg Ask for all required parameters (using an appropriate Dialog Box)
@arg Generate MATLAB code
@arg Execute code
@arg Refresh @c datatool / @c objtool to reflect new objects being created/cleared

The generated code is maintained simultaneously in the memory and on disk, such as a session history is built as the user performs actions.

@note The autogenerated code is a good way to get code bits to quickly build your own. It is also a convenient reference to the IRoot API.

You can view this code anytime by typing the following in the MATLAB command window

@code
ircode_edit
@endcode

This will open MATLAB editor with the current session file in it. This code can be also seen in the main GUI (@ref irootgui.m)

@note The session file name follows the pattern <code>iroot_code_<nnnn>.m</code>

It is typical to copy bits of this file when you are building your own code.

Sometimes you may to "freeze" the current session file and continue the code generation in a new file. To do that, type

@code
ircode_reset
@endcode

@section midguide_matinternal Generating datasets manually

It may happen that you already used MATLAB before to do data analysis, but want to use IRoot routines with existing data vectors/matrices. You will need to use create a @ref irdata object,
but this should be easy. See the examples below (that generate random contents) and adapt parts of the code to your own needs:

@verbatim
ds = irdata();
ds.X = rand(1000, 100);               % dataset will have no=1000 and nf=100
ds = ds.assert_fix();                 % dataset becomes valid with one default class "Class 0"

ds.classes = floor(rand(1000, 1)*10); % assigns classes randomly from (possible values: 0 to 10)
ds = ds.assert_fix();                 % fixes ds.classlabels

ds.fea_x = linspace(4000, 400, 100);  % Informs that the features are wavenumbers within the mid-IR region (in decreasing order)
ds.xname = 'Wavenumbers';
ds.xunit = 'cm^{-1}';
@endverbatim

@section midguide_demo Demo files

There is a list of demo files in the @c demo directory. Demo files are never too many, so there is a constant effort to expand this list.

Also, check the documentation pages for the demo files: @ref demo

@section midguide_own Writing new standalone script *versus* expanding IRoot

A particular idea for analysis, based on a specific dataset, may be general and good enough to become a new way to analyse other datasets as well.

Inheriting the @ref as class ("Analysis Session") is the standard way to incorporate new, multi-step or looped analysis into IRoot.

However, sometimes the new routine would better be implemented as a new @ref block. It really depends on what the analysis does. It is is worth checking the descendants
of @ref block to see if your routine would fit as a descendant of an existing class.

Expanding IRoot is a topic for the @ref lowguide.

---END---
*/
