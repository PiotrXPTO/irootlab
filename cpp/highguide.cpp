/**

@page highguide High-level Guide

This guide was generated from the file highguide.cpp.

@section highguide_who Who should read this guide

This guide is directed to all IRoot users.

@section highguide_scope Scope

This guide contains information that is important for the use of IRoot Graphical User Interfaces (GUIs)

@section highguide_gui Graphical User Interfaces (GUIs)

@subsection highguide_irootgui IRootGUI

This is the main IRoot GUI. It serves as a menu to call the other tools. It also has a box where you can see the MATLAB code that is autogenerated by @c datatool and @c objtool. To invoke @c irootgui, type the following at the MATLAB command window:

@code
iroot
@endcode

@sa @ref irootgui.m documentation page

@subsection highguide_datatool Datatool

This is a powerful interface from where most Exploratory Analysis can be carried out. This GUI can be invoked from MATLAB command window by typing

@code
datatool
@endcode

@sa @ref datatool.m documentation page

@subsection highguide_objtool Objtool

@c objtool is a GUI to create, visualize and manipulates all types of objects. Its minimal use is to create some objects that may be required for certain functions in @c datatool.
To invoke @c objtool, type the following at MATLAB command window

@code
objtool
@endcode

@sa @ref objtool.m documentation page

@subsection highguide_mergetool Mergetool

@c mergetool is a tool to assemble a dataset from multiple spectral files. This GUI can be invoked from MATLAB command window by typing

@code
mergetool
@endcode

After using @c mergetool, you can see your new dataset in @c datatool and save it as an appropriate format. Typically, you will want to save it in a text format, in order to
open it in Excel (or similar program) to assign a class to each individual spectrum, then save as "Text (tab-delimited)" or "CSV".

@sa @ref mergetool.m documentation page

@section highguide_filetypes Supported data files types

@arg Datasets can be loaded from: OPUS-format images, three different text formats, the <code>.mat</code> native format, and the SHEware database.
@arg Datasets can be saved as: three different text formats, and the <code>.mat</code> native format.

These options are available in @c datatool at the "Load..." and "Save as..." buttons.

Datasets can be also assembled from multiple single-spectrum OPUS (thanks to Jacob Filik) or "Pirouette .DAT" files (see @ref highguide_mergetool).

@subsection highguide_txt Text formats

IRoot can read an write in three text formats:

@arg "basic txt"
@arg "Pirouette-like txt"
@arg "IRoot txt" native format

All three formats can be reproduced from existing data in Excel or similar program (then saved as "Text (tab-delimited)" or "CSV" by this program).
The first two txt formats mentioned above are depicted in Figure 1.

@image html dataformat.png
<center>Figure 1 - text formats</center>

The "IRoot txt" format is more complex, but more complete and flexible. Figure 2 shows how it looks like.

@image html dataformat_iroot.png
<center>Figure 2 - "IRoot txt" text format</center>

@note Probably the best option is to mount your files in Excel to look like the "Pirouette-like txt" format.
"basic txt" is not much recommended, because it doesn't contain the information (the "groupcode") that will allow you to take sample averages, neither the x-axis information.
"IRoot txt" is only recommended if you have individual "names" for each spectrum, and you want to see these names annotated in scatter plots.

---

@note You will find sample datasets of all text formats in the <code>~/sampledata</code> folder, under the names <code>example_txt_*.txt</code>. These are small dataset
provided as examples to follow.

@subsection highguide_mat Native .mat format

This format is only understood by IRoot in MATLAB, but is far the @b fastest and produces the @b smallest files. And you can always save your data in other format if needed.

@subsection highguide_opus OPUS images

IRoot can open OPUS images (thanks to Michael Nasse).

@sa @ref dataio_txt_basic, @ref dataio_txt_pir, @ref dataio_txt_iroot, @ref dataio_mat, @ref dataio_db, @ref dataio_opus_nasse, @ref mergetool.m

@section highguide_objects IRoot objects

Doing Data Analysis (DA) in IRoot is almost connecting the right types of objects together. (here object has its meaning as in Object-Oriented Programming (OOP)).

Most Exploratory Analysis (EA) will be restricted to using only these two object classes:

@arg @b Datasets (class @ref irdata)
@arg @b Blocks (class @ref block)

Not surprisingly, datasets are objects that store experimental data.

Objects are entities that contain property and associated methods. In case of @b datasets, some of their properties are:

@arg @c X: data matrix, where rows are physically associated to spectra and columns are features (wavenumbers/factors etc)
@arg @c classes: a zero-based a column vector with same number of elements as rows in @c X. Some negative values are possible and have special meanings (see ...)
@arg @c no: "number of observations" = number of spectra = number of rows in @c X
@arg @c nf: "number of features" = number of columns in @c X
@arg @c classlabels: "class labels": descriptive labels for the numbers in @c classes
@arg @c groupcodes: "group codes": optional (not always used) property that may represent sample code, colony code, patient number etc. This information may be
extracted from the file names if the dataset was assembled with @ref mergetool.m or SHEware. It may be inputted manually with Excel. This can be used to take average spectra
per group (see @ref grag class).
@arg @c obsnames: "observation names": optional (not always used) property that contains one unique string for each spectrum in the dataset. This information may be
the complete file name of the spectrum if the dataset was assembled with @ref mergetool.m or SHEware. This information is mostly used for reference, <em>e.g.</em>
as annotation in a scatter plot.

A block is the generic name of an object that can be (among other things) @b trained and @b used with datasets. In the Spectroscopy+MachineLearning context, a proposed division of blocks can be

<ul>
  <li>Pre-processing
    <ul>
      <li>Baseline correction</li>
      <li>Normalization</li>
      <li>etc</li>
    </ul></li>
  <li>Feature Extraction
    <ul>
      <li>Feature Construction</li>
      <li>Feature Selection</li>
    </ul></li>
  <li>Classifiers</li>
  <li>Miscellanea</li>
    <ul>
      <li>...</li>
      <li>...</li>
    </ul></li>
  <li>Visualization</li>
</ul>

All Exploratory Analysis and Visualization is about training and using the right blocks with the right datasets. Note that visualizations are also represented by a block. To visualize something, one actually
"uses" a block descending from the object class called @ref vis.

This is basically all one needs to know to start using @c datatool (@ref datatool.m).

@section highguide_otherclasses Other base object classes

Apart from datasets and blocks, IRoot have other object classes for various ocasions:

@arg @b Sub-dataset Generation Specs (class @ref sgs): this class is one of the major features of IRoot and is used when cross-validation is needed
@arg @b Peak detectors (class @ref peakdetector): self-explanatory name; used in various ocasions, for example, when the user wants to plot loadings with the most relevant peaks marked
@arg @b Feature Subset Graders (class @ref fsg): used in feature selection processes, and also in the "Feature Grades" visualization (class @ref vis_featuregrades)
@arg @b Vector Comparer (class @ref vectorcomp): used to compare classifiers through statistical tests
@arg @b General-purpose Logs (class @ref irlog): various kinds of analysis output, from where one perform further operations, such as generate HTML reports
@arg @b Analysis Session (class @ref as): this is the base class for the most interesting kinds of Data Analysis.

@image html incompleteclassdiagram.png
<center>Figure 1 - Incomplete class diagram - showing titles and corresponding class names</center>



@section highguide_setup Local setup

IRoot setup stores information such as plot configuration (color, markers, font etc), default path to data files etc. When one of the main GUIs is started, it tries to execute a file
called <code>irootsetup.m</code> in your current folder. If found, customized setup will be loaded. Otherwise, default setup values will be used.

In order to create a setup file, enter the following in MATLAB command window:
@code
setup_write
@endcode

This will create a file <code>irootsetup.m</code> in your current directory. You can then open this file by typing

@code
edit irootsetup.m
@endcode

You may change the values and save the file again.

@note When you change the <code>irootsetup.m</code> file, call @code setup_load @endcode from MATLAB command line for your changes to have immediate effect, and to prevent your changes to be overwritten.
For example, when @c datatool loads a data file, it writes a new <code>irootsetup.m</code> so that the default data path (<code>PATH.data</code>) points to the location of the dataset that was just loaded.

@section highguide_goodthings Good things to know in MATLAB

Even if your intention is to use the Graphical User Interfaces (GUIs) only (such as @c datatool), a few things about MATLAB syntax are probably required for survival:

@subsection highguide_vectors MATLAB vectors syntax

Many parameters in the GUIs need to be inputted as MATLAB vectors, so it is important to know this simple syntax. For example:

@code
>> [1, 2, 4]
>> 1:5 % same as [1, 2, 3, 4, 5]
@endcode

@subsection highguide_fields Accessing fields within MATLAB structures and objects

Although there are many ways to view data in the GUIs, you may want to check things by yourself from MATLAB command line, for example:

@code
>> data.X
>> data.classes
@endcode


@section organization Recommended folder organization

This section explains the recommended way to organize your working and data folders.

Create one "work" folder for each different project that you have. Each folder may typically contain:
@arg a local <code>irootsetup.m</code> setup file
@arg files named <code>log_iroot_NNNN.m</code> containing MATLAB code autogenerated by @c datatool or @c objtool
@arg HTML files generated by some @c vis classes
@arg Figures etc
@arg Your custom source files

If datasets may be shared by more than one project, it is recommended to maintain a separate folder structure for datasets. Please note
that @c datatool re-writes the <code>irootsetup.m</code> file to point the data path to point to the location of the last openened
dataset. Therefore, it should be always straightforward to locate your data.

@section highguide_words Words/Concepts/Abbreviations

Every research area has its own vocabulary. Because we are in the middle of three different areas (Statistics, Biology and Computer Programming), it is very important to explain what we mean by what we say. So, here is a @b glossary:

@b dataset: An object containing a collection of experimental data: spectra, their corresponding classes, their corresponding original file names, group codes, x-axis (usually wavenumbers) etc

@b object: an entity in MATLAB workspace that has a set of properties. This may be a dataset, a block, or other type of object.

@b class: Logical sub-division of a dataset, usually corresponding to a particular chemical treatment, cancer type, patient, or etc. Sometimes referred to as "data class" to avoid confusion.

@b class(2): Although less used, class may be also used in its Object-Oriented Programming sense. In these cases, the expression "object class" is used.

@b zero-based: (adjective) refers to an integer variable where the lowest possible value is zero

@b one-based: (adjective) refers to an integer variable where the lowest possible value is one

@b range: is a 2-element vector specifying the boundaries of a region. Example: <code>[1800, 900]</code>

@b index: is always one-based value

@b nf: number of features (usually referring to a dataset)

@b nc: number of classes (usually referring to a dataset)

@b no: Number of observations (referring to a dataset)

@subsection classnumbers Data Class Numbers

These codes apply to data classes (@ref irdata::classes)

<ul>
  <li>>= 0: existing class</li>
  <li>-1: refuse-to-decide. A classifier wasn't confident enough to assign class</li>
  <li>-2: outlier.</li>
  <li>-3: refuse-to-cluster</li>
  <li>-10: not found / error in conversion</li>
</ul>

@section highguide_learn Using IRoot

At the moment, the best way to learn how to use IRoot is going through one of the step-by-step tutorials. The concepts learned from the tutorials
can be re-applied to different situations.

@section commandsheet IRoot command sheet

There are many things that may be more practical doing from the command line than using the GUIs.

<table>
<tr>
  <td><code>v_x2ind([1650, 1450, 1080], ds01.fea_x)</code></td>
  <td>Converts wavenumbers to feature indexes. Please adapt @c "ds01" and the wavenumbers for your particular case.</td>
</tr><tr>
  <td><code>save_as_png([], "NameOfFigure.png", 300)</code></td>
  <td>Saves current figure as a PNG file named @c NameOfFigure.png at @c 300 dpi resolution.</td>
</tr>
</tr><tr>
  <td><code>xlim([900, 1800])</code></td>
  <td>Sets current figure x-axis limits to <code>1800-900 cm^-1</code> region. Note that the lower value comes first in the command.</td>
</tr>
</tr><tr>
  <td><code>ylim([0, 1])</code></td>
  <td>Sets current figure y-axis limits between 0 and 1.</td>
</tr>
</table>

@section highguide_more More...

@arg Follow the step-by-step tutorials at http://bioph.lancs.ac.uk/iroot
@arg Check the @ref demo
@arg Checking the autogenerated MATLAB code is a quick way to learn how to use the API


---END---

*/
